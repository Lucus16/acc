no_args() { return; }
one_arg(x) { return; }
two_args(x, y) { return; }
three_args(x, y, z) { return; }

zero_int() :: -> Int { return 0; }
zero_bool() :: -> Bool { return False; }
zero_char() :: -> Char { return '\0'; }
zero_void() :: -> Void { return; }
zero_pair() :: -> (Int, Bool) { return (0, False); }
zero_list() :: -> [Int] { return []; }

inc_untyped(x) { return x + 1; }
inc_typed(x) :: Int -> Int { return x + 1; }

id_untyped(x) { return x; }
id_typed(x) :: a -> a { return x; }

digits(x) {
	if (x < 10) {
		return 1;
	} else {
		return 1 + digits(x / 10);
	}
}

swap(t) {
	var tmp = t.fst;
	t.fst = t.snd;
	t.snd = tmp;
}

swapped(t) {
	return (t.snd, t.fst);
}

Int count = 0;
